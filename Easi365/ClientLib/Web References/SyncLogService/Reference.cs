//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34011 版自动生成。
// 
#pragma warning disable 1591

namespace ClientLib.SyncLogService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LoggingServiceSoap", Namespace="http://www.sinoserve.com/")]
    public partial class LoggingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLogsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LoggingService() {
            this.Url = global::ClientLib.Properties.Settings.Default.ClientLib_SyncLogService_LoggingService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddLogCompletedEventHandler AddLogCompleted;
        
        /// <remarks/>
        public event GetAllLogsCompletedEventHandler GetAllLogsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sinoserve.com/AddLog", RequestNamespace="http://www.sinoserve.com/", ResponseNamespace="http://www.sinoserve.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddLog(Log[] logs) {
            this.Invoke("AddLog", new object[] {
                        logs});
        }
        
        /// <remarks/>
        public void AddLogAsync(Log[] logs) {
            this.AddLogAsync(logs, null);
        }
        
        /// <remarks/>
        public void AddLogAsync(Log[] logs, object userState) {
            if ((this.AddLogOperationCompleted == null)) {
                this.AddLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLogOperationCompleted);
            }
            this.InvokeAsync("AddLog", new object[] {
                        logs}, this.AddLogOperationCompleted, userState);
        }
        
        private void OnAddLogOperationCompleted(object arg) {
            if ((this.AddLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sinoserve.com/GetAllLogs", RequestNamespace="http://www.sinoserve.com/", ResponseNamespace="http://www.sinoserve.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Log[] GetAllLogs() {
            object[] results = this.Invoke("GetAllLogs", new object[0]);
            return ((Log[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLogsAsync() {
            this.GetAllLogsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllLogsAsync(object userState) {
            if ((this.GetAllLogsOperationCompleted == null)) {
                this.GetAllLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLogsOperationCompleted);
            }
            this.InvokeAsync("GetAllLogs", new object[0], this.GetAllLogsOperationCompleted, userState);
        }
        
        private void OnGetAllLogsOperationCompleted(object arg) {
            if ((this.GetAllLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLogsCompleted(this, new GetAllLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sinoserve.com/")]
    public partial class Log {
        
        private int idField;
        
        private string ipField;
        
        private string computerNameField;
        
        private string fileNameField;
        
        private UserAction userActionField;
        
        private string departmentNameField;
        
        private string userNameField;
        
        private string logMessageField;
        
        private System.DateTime createdTimeField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string IP {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public string ComputerName {
            get {
                return this.computerNameField;
            }
            set {
                this.computerNameField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public UserAction UserAction {
            get {
                return this.userActionField;
            }
            set {
                this.userActionField = value;
            }
        }
        
        /// <remarks/>
        public string DepartmentName {
            get {
                return this.departmentNameField;
            }
            set {
                this.departmentNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string LogMessage {
            get {
                return this.logMessageField;
            }
            set {
                this.logMessageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedTime {
            get {
                return this.createdTimeField;
            }
            set {
                this.createdTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sinoserve.com/")]
    public enum UserAction {
        
        /// <remarks/>
        Upload,
        
        /// <remarks/>
        Download,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Update,
        
        /// <remarks/>
        Share,
        
        /// <remarks/>
        Send,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllLogsCompletedEventHandler(object sender, GetAllLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Log[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Log[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591